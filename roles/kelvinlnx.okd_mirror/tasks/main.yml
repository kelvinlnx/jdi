---
# tasks file for kelvinlnx.okd_mirror
- name: "PREREQ: Install packages - python3-bcrypt, python3-passlib}"
  apt:
    name:
      - python3-bcrypt
      - python3-passlib
    state: latest

- name: "PREREQ: Create registry directories"
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ registry.auth }}"
    - "{{ registry.certs }}"
    - "{{ registry.data }}"

- name: "PREREQ: Deploy certificates"
  copy:
    src: "{{ tmp_cert.files | json_query(item.name) }}"
    dest: "{{ registry.certs }}"
    mode: "{{ item.mode }}"
  loop:
    - name: key
      mode: "0600"
    - name: crt
      mode: "0644"

- name: "PREREQ: Copy CA Certificate"
  copy:
    src: "{{ tmp_ca }}"
    dest: /usr/local/share/ca-certificates/
  when: tmp_ca is defined

- name: "PREREQ: Update ca trusts"
  command: update-ca-certificates
  when: tmp_ca is defined

- name: "PREREQ: Generate credentials"
  htpasswd:
    name: "{{ registry.username }}"
    password: "{{ registry.password }}"
    crypt_scheme: bcrypt
    path: "{{ registry.auth }}/htpasswd"

- name: "SETUP: Create and run latest docker registry container"
  containers.podman.podman_container:
    name: "{{ local_registry | regex_search('[^\\.]*') }}"
    image: docker.io/library/registry:latest
    state: started
    force_restart: yes
    ports: 5000:5000/tcp
    volume:
      - "{{ registry.data }}:/var/lib/registry"
      - "{{ registry.auth }}:/auth"
      - "{{ registry.certs }}:/certs"
    env:
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
      REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
      REGISTRY_HTTP_TLS_CERTIFICATE: /certs/{{ tmp_cert.files.crt | basename }}
      REGISTRY_HTTP_TLS_KEY: /certs/{{ tmp_cert.files.key | basename }}
      REGISTRY_HTTP_SECRET: "{{ registry.secret }}"

#    publish[ed[_ports]]|ports: [<IP>:[<hostPort>]:]<containerPort>[/tcp|/udp]
#    hostname:
#    volume: </host-d>[:</cont-d>]
#    device: "/dev/sda:/dev/xvda:rwm"
#    detach: no|Yes
#    force_restart: No|yes
#    oom_kill_disable: No|yes
#    privileged: No|yes

- name: "SETUP: Check for oc command"
  command: which oc
  failed_when: false
  register: oc_result

- block:
    - name: "SETUP: Check if oc.tar.gz exists in {{ gen_dir }}"
      stat:
        path: "{{ gen_dir }}/oc.tar.gz"
      register: stat_result
      delegate_to: localhost

    - name: "SETUP: Copy oc.tar.gz to server"
      copy:
        src: "{{ gen_dir }}/oc.tar.gz"
        dest: /tmp
      when: stat_result.stat.exists

    - block:
      - name: "SETUP: Wait for connectivity to {{ okd_client_tools | dirname }}"
        uri:
          url: "{{ okd_client_tools | dirname }}"
        register: uri_result
        until: uri_result.status == 200
        retries: 720   # 1 hr
        delay: 5

      - name: "SETUP: Download oc client tools"
        get_url:
          url: "{{ okd_client_tools }}"
          dest: /tmp/oc.tar.gz
      when: not stat_result.stat.exists

    - name: "SETUP: Extract oc client tools"
      unarchive:
        src: /tmp/oc.tar.gz
        dest: /usr/local/bin/
        remote_src: yes
  when: oc_result.rc != 0

- name: "SETUP: copy pull-secret"
  copy:
    src: "{{ my_pull_secret }}"
    dest: /tmp/pull-secret

- name: "SETUP: Inject repo credentials into pull-secret"
  replace:
    path: /tmp/pull-secret
    replace: '\1"{{ local_registry }}":{"auth":"{{ (registry.username + ":" + registry.password)|b64encode }}","email":"{{ registry.email }}"},\2'
    regexp: '^({"auths":{)(.*)'

- name: "INFO: Wait for response from https://quay.io/repository/openshift-release-dev/ocp-release?tab=tags"
  uri:
    url: https://quay.io/repository/openshift-release-dev/ocp-release?tab=tags
  register: uri_result
  until: uri_result.status == 200
  retries: 720        # 1 hr
  delay: 5

- name: "INFO: To monitor repository mirroring"
  debug:
    msg: "ssh to {{ inventory_hostname }} and run: tail -f /tmp/mirror_result"

- name: "SETUP: Start repository mirroring"
  shell: |
    oc adm release mirror -a {{local_secret_json}} \
    --from=quay.io/{{product_repo}}/{{release_name}}:{{ocp_release}}-{{architecture}} \
    --to={{local_registry}}/{{local_repository}} \
    --to-release-image={{local_registry}}/{{local_repository}}:{{ocp_release}}-{{architecture}} 2> /tmp/oc_msg | tee /tmp/mirror_result

    sed -nE '/^imageContentSources:$/,/^$/s/(.*)/\1/p' /tmp/mirror_result > /tmp/imageContentSources

- name: "SETUP: Extract openshift-install"
  shell: oc adm release extract -a {{local_secret_json}} --command=openshift-install "{{local_registry}}/{{local_repository}}:{{ocp_release}}-{{architecture}}"
  tags:
    - extract_installer

- name: "SETUP: Retrieve the generated openshift-install command"
  fetch:
    src: openshift-installer
    dest: "{{ gen_dir }}"
  become: True

- name: "SETUP: Prepare directory for openshift install files"
  file:
    path: /var/www/html/inst
    mode: '0755'
  become: True

- name: "INFO: Check if images exists"
  stat:
    path: "{{ gen_dir }}/{{ item }}"
  loop:
  - "rhcos-installer-kernel-x86_64"
  - "rhcos-installer-initramfs.x86_64.img"
  - "rhcos-metal.x86_64.raw.gz"
  register: stat_result
  delegate_to: localhost

- name: "SETUP: Copy {{ item.item }}"
  copy:
    src: "{{ gen_dir }}/{{ item.item }}"
    dest: /var/www/html/inst/{{ item.item }}
  when: item.stat.exists
  loop: "{{ stat_result.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: "SETUP: Download rhcos images"
  vars:
    rhcos_base: "{{ rhcos_release | regex_search('[0-9]{1,2}\\.[0-9]{1,2}') }}"
    rhcos_url: "https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/{{ rhcos_base }}/{{ rhcos_release }}"
  get_url:
    url: "{{ rhcos_url }}/{{ item.item }}"
    dest: /var/www/html/inst/{{ item | basename }}
  when: not item.stat.exists
  loop: "{{ stat_result.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: "CLEANUP: remove the temporary file"
  file:
    path: "{{ item }}"
    state: absent
  when: cleanmeup
  loop:
  - /tmp/oc_msg
  - /tmp/oc.tar.gz
  - /tmp/mirror_result
  - /tmp/imageContentSources
  - /tmp/pull-secret
  tags:
  - cleanup
