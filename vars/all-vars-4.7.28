# GLOBAL VARIABLES
# ==============================================================================
# These variables are used by all playbooks/roles.
gen_dir:  ./generated
cert_dir: "{{ gen_dir }}/private"
os_iso: "{{ gen_dir }}/ubuntu-20.04.3-live-server-amd64.iso"
my_pull_secret: "~/Downloads/pull-secret"
okd_client_tools: https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz

virt_net_name:   openshift
virt_net_domain: example.net

ocp_release: 4.7.28                 # Choose from https://access.redhat.com/downloads/content/290/
rhcos_kernel: rhcos-live-kernel-x86_64
rhcos_initrd: rhcos-live-initramfs.x86_64.img
rhcos_img: rhcos-live-rootfs.x86_64.img
rhcos_pxeconfig: coreos.live.rootfs_url=http://{{ registry_name }}/inst/{{ rhcos_img }} coreos.inst.install_dev=vda

# Prereq files
# ==============================================================================

# The location of the ubuntu iso. Ok to accept the default unless you've
# manually downloaded the files.



# NETWORK SETTINGS
# ==============================================================================
# virt_net_remove:
#   False - Create libvirt network.
#   True  - Delete libvirt network. To be used STANDALONE with net.yml playbook.
virt_net_remove: False

# Extra dnsmasq options to add to network. See net.yml playbook for example.
dnsmasq_xtra_list: "{{[]}}"

# VM SETTINGS
# ==============================================================================
# virt_registry_remove:
#   False - Install the VM (Used by openshift mirror registry).
#   True  - Delete the VM. To be used STANDALONE with vm.yml playbook.
virt_registry_remove: False

vm_name: registry

# Setup your identity as trusted user in VM. Used by ssh.
# The file must be located in $(HOME)/.ssh/ directory
user_pubkey_filename: "id_rsa.pub"

myvm:
  name: "{{ vm_name }}"
  fqdn: "{{ vm_name }}.{{ virt_net_domain }}"
  memory: 1024
  vcpu: 1
  disk:
    path: /var/lib/libvirt/images/{{ vm_name }}.qcow2
    size: 25G                             # 4.6.31 repo uses approx 6GB
  username: user
  password: password

# GENERATE CERTS SETTINGS
# ==============================================================================
# generate_ca:
#   True  - Generate the CA
#   False - You have to provide the key and crt files for the CA.
generate_ca: true

cert_domain: "{{ virt_net_domain }}"

# IF USING OWN ROOT CERT
# Uncomment ca_pass line and replace the ca.files with your own ca location.
# ca_pass: KEY_IN_YOUR_PASS

ca:
  name: &ca_sname myca                                    # short hostname
  fqdn: &ca_lname "{{ tmp_ca_sname }}.{{ cert_domain }}"  # fully qualified domain name
  files:
    key: "{{ cert_dir }}/{{ tmp_ca_lname }}.key"          # location of CA private key
    crt: "{{ cert_dir }}/{{ tmp_ca_lname }}.crt"          # location of CA certificate
  subj:
    country: SG
    state: Singapore
    locality: Singapore
    org: EXAMPLE NET                                      # Organization
    ou: IT                                                # Department
    cn: Boss
    emailAddress: owner@{{ tmp_ca_lname }}
  days: 3650
  pass: "{{ ca_pass | default('MyCAPass') }}"             # replace the value MyCAPass if using own CA Cert

# This app can help you generate additional certs signed by the CA above.
# Just add your own list with the name, fqdn, files and subj as below.
clients:
- name: &reg_sname registry
  fqdn: &reg_lname "{{ tmp_reg_sname }}.{{cert_domain}}"
  files:
    key: "{{ cert_dir }}/{{ tmp_reg_lname }}.key"
    crt: "{{ cert_dir }}/{{ tmp_reg_lname }}.crt"
    csr: "{{ cert_dir }}/{{ tmp_reg_lname }}.csr"
  subj:
    country: MY
    state: Kuala Lumpur
    locality: KL
    org: EXAMPLE.COM
    ou: IT
  days: 3650


tmp_ca_sname: *ca_sname
tmp_ca_lname: *ca_lname
tmp_reg_sname: *reg_sname
tmp_reg_lname: *reg_lname


# MIRROR SETTINGS
# ==============================================================================

root_ca: "{{ ca.files.crt }}"

local_registry: "{{ vm_name }}.{{ virt_net_domain }}:5000"

registry:
  username: reguser
  password: regpass
  email: user@{{ local_registry | regex_search('[^:]*') }}
  secret: SecretUsedByRegistry
  auth: /srv/registry/auth
  certs: /srv/registry/certs
  data: /srv/registry/data
  port: "{{ registry_port | default('5000')}}"

tmp_cert:
  files:
    key: "{{ cert_dir }}/{{ local_registry | regex_search('[^:]*') }}.key"
    crt: "{{ cert_dir }}/{{ local_registry | regex_search('[^:]*') }}.crt"


# These are the registry mirroring informations needed. Refer to the
# docs at https://docs.openshift.com/container-platform/4.6/installing/installing-mirroring-installation-images.html#installing-mirroring-installation-images
# The listed defaults would work but it only mirrors OCP 4.6.310
local_repository: ocp4/openshift4
product_repo: openshift-release-dev               # for okd, set to "openshift"
release_name: 'ocp-release'                       # for okd, set to "okd"
architecture: x86_64

# CLUSTER SETTINGS
# ==============================================================================
master_nodes: 3                 # do not change, rhocp only supports 3
worker_nodes: 0

registry_crt: "{{ gen_dir }}/private/myca.{{ virt_net_domain }}.crt"

registry_name: "{{ vm_name }}.{{ virt_net_domain }}"
registry_user_info: "{{ registry.username }}:{{ registry.password }}"
registry_user_email: "{{ registry.email }}"

